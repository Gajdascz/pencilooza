extends layout 



block content
  include mixins/inputField
  include mixins/adminForm
  include mixins/hiddenField
  include mixins/manufacturerRegistration
  -
    const params = {
      title, entityType, dataKey, entityId, errorMsgs,
      repFirstName, repLastName, repRole,
      companyName, companyRef, companyStructure, yearFounded, ein, companyDescription,
      countryCode, state, postalCode, city, street, extension,
      email, phone, website,
      note
    }
  if isUpdate
    +adminForm('registrationForm', 'updateEntity')
      case dataKey
        when 'manufacturer'
          +manufacturerRegistration(params)
        default
          p No registration of type #{dataKey} found. 
  else 
    form(method='POST' id='registrationForm' action=`/registration/create/${dataKey}`).register-form
      case dataKey
        when 'manufacturer'
          +manufacturerRegistration(params)
          button(type='submit').form-submit-button Submit
        default
          p No registration of type #{dataKey} found.

block scripts
  script.
    const setPendingValidation = (e) => {
      const field = e.target;
      field.classList.remove('valid')
      field.classList.remove('invalid')
      if(field.value.trim() === '') field.classList.remove('pending-validation');
      else field.classList.add('pending-validation');
    }
    const getErrorMessage = (errTxt) => {
      const el = document.createElement('span');
      el.classList.add('error-message','input-field-wrapper-error-message');
      el.textContent = errTxt;
      return el;
    }
    const inputFields = document.querySelectorAll('.input-field-wrapper-field')
    inputFields.forEach(field => field.addEventListener('change', setPendingValidation))
    const errJSONStr = '!{JSON.stringify(errors)}';
    const errors = errJSONStr && errJSONStr.length > 0 ? JSON.parse('!{JSON.stringify(errors)}') : [];
    if(errors && errors.length > 0) {
      inputFields.forEach(inputField => {
        const inputFieldError = errors.find(err => err.selector === inputField.id);
        if(inputFieldError) {
          inputField.classList.add('invalid');
          inputField.nextSibling.append(getErrorMessage(inputFieldError.msg)) // Selects div.input-field-wrapper-errors-container from inputField mixin
        } else inputField.classList.add('valid');
      })
    }