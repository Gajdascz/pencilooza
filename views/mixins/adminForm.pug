include inputField
include inputWithButton 
include hiddenField
//-
  adminForm provides a form Element which blocks submissions unless the admin password is correct.
  |--> Form submission handlers MUST be registered in the adminCommands module to process the form data.

mixin adminForm(formId, adminCommand, successRoute = null)
  form(method='POST', action='/inventory/admin-command' id=formId).form-container
    +hiddenField('admin-command','adminCommand',value=adminCommand)
    block
    +inputWithButton('password','adminPassword','admin-password',
      {
        labelIsHidden:true,
        labelText:'Admin Password',
        inputPlaceholder:'Admin Password',
        buttonClass:'admin-form-submit-button',
        buttonText:'Submit',
        buttonType:'submit',
      }
    )
  script.
    document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('#'+'#{formId}');
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const searchParamsInstance = new URLSearchParams(formData);
      try {
        const response = await fetch('/inventory/admin-command/', {
          method: 'POST',
          body: searchParamsInstance,
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        });
        const json = await response.json();
        if(json.errors?.length > 0) return json.errors?.forEach(err => alert(`Error: ${err.msg}`));
        else if(json.msg) alert(`Success: ${json.msg}`);
        else alert(`${form.id} submission successful`)
        if(json.redirect) location.replace(json.redirect);
        else location.reload()
      } catch (err) { console.error('Error:', err); }
      });
    });